import os
import random
import logging
import telebot
from telebot import types
from collections import deque
import threading
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.environ.get('BOT_TOKEN')
if not BOT_TOKEN:
    logger.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN")
    raise ValueError("BOT_TOKEN –Ω–µ —É–∫–∞–∑–∞–Ω")

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USER_SEARCHING = 1      # –ò—â–µ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
USER_CHATTING = 2       # –û–±—â–∞–µ—Ç—Å—è —Å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º
USER_IDLE = 0           # –ù–µ –≤ –ø–æ–∏—Å–∫–µ –∏ –Ω–µ –≤ —á–∞—Ç–µ

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
users = {}              # –°–ª–æ–≤–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
search_queue = deque()  # –û—á–µ—Ä–µ–¥—å –ª—é–¥–µ–π –≤ –ø–æ–∏—Å–∫–µ
chat_pairs = {}         # –ü–∞—Ä—ã —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤: user_id -> companion_id

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
total_messages = 0
started_chats = 0
active_chats = 0

# –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –æ–±—â–∏–º –¥–∞–Ω–Ω—ã–º
users_lock = threading.RLock()

def get_user_state(user_id):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    with users_lock:
        return users.get(user_id, {}).get('state', USER_IDLE)

def set_user_state(user_id, state):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    with users_lock:
        if user_id not in users:
            users[user_id] = {'state': state}
        else:
            users[user_id]['state'] = state

def add_to_search_queue(user_id):
    """–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—á–µ—Ä–µ–¥—å –ø–æ–∏—Å–∫–∞"""
    with users_lock:
        if user_id not in search_queue:
            search_queue.append(user_id)
            set_user_state(user_id, USER_SEARCHING)

def remove_from_search_queue(user_id):
    """–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –ø–æ–∏—Å–∫–∞"""
    with users_lock:
        if user_id in search_queue:
            search_queue.remove(user_id)
        if get_user_state(user_id) == USER_SEARCHING:
            set_user_state(user_id, USER_IDLE)

def create_chat_pair(user1_id, user2_id):
    """–°–æ–∑–¥–∞—Ç—å –ø–∞—Ä—É –¥–ª—è —á–∞—Ç–∞"""
    global started_chats, active_chats
    with users_lock:
        chat_pairs[user1_id] = user2_id
        chat_pairs[user2_id] = user1_id
        set_user_state(user1_id, USER_CHATTING)
        set_user_state(user2_id, USER_CHATTING)
        started_chats += 1
        active_chats += 1

def end_chat(user_id):
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    global active_chats
    with users_lock:
        if user_id in chat_pairs:
            companion_id = chat_pairs[user_id]
            if companion_id in chat_pairs:
                del chat_pairs[companion_id]
            del chat_pairs[user_id]
            set_user_state(user_id, USER_IDLE)
            set_user_state(companion_id, USER_IDLE)
            active_chats -= 1
            return companion_id
    return None

def find_chat_match():
    """–ù–∞–π—Ç–∏ –ø–∞—Ä—ã —Å—Ä–µ–¥–∏ –∏—â—É—â–∏—Ö —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤"""
    with users_lock:
        while len(search_queue) >= 2:
            user1_id = search_queue.popleft()
            user2_id = search_queue.popleft()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤—Å—ë –µ—â–µ –∏—â—É—Ç —á–∞—Ç
            if get_user_state(user1_id) != USER_SEARCHING or get_user_state(user2_id) != USER_SEARCHING:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –æ—á–µ—Ä–µ–¥—å —Ç–æ–ª—å–∫–æ —Ç–µ—Ö, –∫—Ç–æ –µ—â–µ –∏—â–µ—Ç
                if get_user_state(user1_id) == USER_SEARCHING:
                    search_queue.append(user1_id)
                if get_user_state(user2_id) == USER_SEARCHING:
                    search_queue.append(user2_id)
                continue
                
            create_chat_pair(user1_id, user2_id)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–±–æ–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ –Ω–∞—á–∞–ª–µ —á–∞—Ç–∞
            bot.send_message(user1_id, "üé≠ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è –∞–Ω–æ–Ω–∏–º–Ω–æ.")
            bot.send_message(user2_id, "üé≠ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è –∞–Ω–æ–Ω–∏–º–Ω–æ.")
            logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –ø–∞—Ä–∞ —á–∞—Ç–∞: {user1_id} <-> {user2_id}")

# –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø–∞—Ä
def search_pairs_periodically():
    while True:
        try:
            find_chat_match()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–∞—Ä: {e}")
        time.sleep(1)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É

# –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∞—Ä
search_thread = threading.Thread(target=search_pairs_periodically, daemon=True)
search_thread.start()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_keyboard(user_id):
    state = get_user_state(user_id)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    
    if state == USER_IDLE:
        markup.add(types.KeyboardButton("üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"))
        markup.add(types.KeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ"))
    elif state == USER_SEARCHING:
        markup.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫"))
        markup.add(types.KeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ"))
    elif state == USER_CHATTING:
        markup.add(types.KeyboardButton("üëã –ó–∞–∫–æ–Ω—á–∏—Ç—å —á–∞—Ç"))
        markup.add(types.KeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω–∞—è —Ç–µ–º–∞"))
    
    return markup

# –°–ø–∏—Å–æ–∫ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç–µ–º –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
RANDOM_TOPICS = [
    "–ö–∞–∫–æ–µ –≤–∞—à–µ –ª—é–±–∏–º–æ–µ –º–µ—Å—Ç–æ, –≥–¥–µ –≤—ã –ø–æ–±—ã–≤–∞–ª–∏?",
    "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Ñ–∏–ª—å–º–µ, –∫–æ—Ç–æ—Ä—ã–π –≤–∞—Å –≤–ø–µ—á–∞—Ç–ª–∏–ª.",
    "–ï—Å–ª–∏ –±—ã –≤—ã –º–æ–≥–ª–∏ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ª—é–±–æ–π –Ω–∞–≤—ã–∫ –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ, —á—Ç–æ –±—ã —ç—Ç–æ –±—ã–ª–æ?",
    "–ö–∞–∫—É—é –µ–¥—É –≤—ã –º–æ–≥–ª–∏ –±—ã –µ—Å—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å?",
    "–ß—Ç–æ –±—ã –≤—ã —Å–¥–µ–ª–∞–ª–∏, –µ—Å–ª–∏ –±—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –º–∏–ª–ª–∏–æ–Ω?",
    "–ö–∞–∫–∞—è –≤–∞—à–∞ –ª—é–±–∏–º–∞—è –∫–Ω–∏–≥–∞ –∏ –ø–æ—á–µ–º—É?",
    "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –Ω–µ–æ–±—ã—á–Ω–æ–µ —Ö–æ–±–±–∏?",
    "–ö–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –∏—Å—Ç–æ—Ä–∏–∏ –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?",
    "–ö–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç –≤–∞—à –∏–¥–µ–∞–ª—å–Ω—ã–π –≤—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å?",
    "–ï—Å–ª–∏ –±—ã –≤—ã –º–æ–≥–ª–∏ –∂–∏—Ç—å –≤ –ª—é–±–æ–π —Å—Ç—Ä–∞–Ω–µ, –∫–∞–∫—É—é –±—ã –≤—ã–±—Ä–∞–ª–∏?"
]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start_command(message):
    user_id = message.from_user.id
    bot.send_message(
        user_id, 
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê–Ω–æ–Ω–∏–º–Ω—ã–π –ß–∞—Ç!\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è —Å –Ω–µ–∑–Ω–∞–∫–æ–º—Ü–∞–º–∏ –∞–Ω–æ–Ω–∏–º–Ω–æ.\n"
        "–ù–∞–∂–º–∏—Ç–µ 'üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
        reply_markup=get_keyboard(user_id)
    )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@bot.message_handler(commands=['help'])
def help_command(message):
    user_id = message.from_user.id
    bot.send_message(
        user_id,
        "üìå *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:*\n\n"
        "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ 'üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞' –¥–ª—è –ø–æ–∏—Å–∫–∞\n"
        "‚Ä¢ –î–æ–∂–¥–∏—Ç–µ—Å—å, –ø–æ–∫–∞ –±–æ—Ç –Ω–∞–π–¥–µ—Ç –≤–∞–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞\n"
        "‚Ä¢ –û–±—â–∞–π—Ç–µ—Å—å –∞–Ω–æ–Ω–∏–º–Ω–æ!\n"
        "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ 'üëã –ó–∞–∫–æ–Ω—á–∏—Ç—å —á–∞—Ç', –∫–æ–≥–¥–∞ –∑–∞—Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä\n\n"
        "üìù *–ö–æ–º–∞–Ω–¥—ã:*\n"
        "/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞",
        parse_mode="Markdown",
        reply_markup=get_keyboard(user_id)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats
@bot.message_handler(commands=['stats'])
def stats_command(message):
    user_id = message.from_user.id
    with users_lock:
        waiting_users = len(search_queue)
    
    bot.send_message(
        user_id,
        f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:*\n\n"
        f"üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: {active_chats}\n"
        f"üîÑ –í—Å–µ–≥–æ –Ω–∞—á–∞—Ç–æ —á–∞—Ç–æ–≤: {started_chats}\n"
        f"üí¨ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}\n"
        f"‚è≥ –û–∂–∏–¥–∞—é—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞: {waiting_users}\n",
        parse_mode="Markdown",
        reply_markup=get_keyboard(user_id)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
@bot.message_handler(func=lambda message: message.text in ["üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫", "üëã –ó–∞–∫–æ–Ω—á–∏—Ç—å —á–∞—Ç", "‚ÑπÔ∏è –ò–Ω—Ñ–æ", "üé≤ –°–ª—É—á–∞–π–Ω–∞—è —Ç–µ–º–∞"])
def button_handler(message):
    user_id = message.from_user.id
    text = message.text
    
    if text == "üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞":
        state = get_user_state(user_id)
        if state == USER_IDLE:
            add_to_search_queue(user_id)
            bot.send_message(
                user_id, 
                "üîç –ò—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.",
                reply_markup=get_keyboard(user_id)
            )
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞")
        else:
            bot.send_message(
                user_id,
                "‚ùó –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫, –ø–æ–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —á–∞—Ç–µ –∏–ª–∏ —É–∂–µ –∏—â–µ—Ç–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.",
                reply_markup=get_keyboard(user_id)
            )
    
    elif text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫":
        state = get_user_state(user_id)
        if state == USER_SEARCHING:
            remove_from_search_queue(user_id)
            bot.send_message(
                user_id,
                "üõë –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.",
                reply_markup=get_keyboard(user_id)
            )
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ–Ω–∏–ª –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞")
        else:
            bot.send_message(
                user_id,
                "‚ùó –í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–µ–∂–∏–º–µ –ø–æ–∏—Å–∫–∞.",
                reply_markup=get_keyboard(user_id)
            )
    
    elif text == "üëã –ó–∞–∫–æ–Ω—á–∏—Ç—å —á–∞—Ç":
        state = get_user_state(user_id)
        if state == USER_CHATTING:
            companion_id = end_chat(user_id)
            if companion_id:
                bot.send_message(
                    companion_id,
                    "üëã –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª —á–∞—Ç.\n–ù–∞–∂–º–∏—Ç–µ 'üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä.",
                    reply_markup=get_keyboard(companion_id)
                )
            bot.send_message(
                user_id,
                "üëã –ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω.\n–ù–∞–∂–º–∏—Ç–µ 'üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä.",
                reply_markup=get_keyboard(user_id)
            )
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–≤–µ—Ä—à–∏–ª —á–∞—Ç —Å {companion_id}")
        else:
            bot.send_message(
                user_id,
                "‚ùó –í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —á–∞—Ç–µ.",
                reply_markup=get_keyboard(user_id)
            )
    
    elif text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ":
        bot.send_message(
            user_id,
            "ü§ñ *–û –±–æ—Ç–µ:*\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –∞–Ω–æ–Ω–∏–º–Ω–æ –æ–±—â–∞—Ç—å—Å—è —Å —Å–ª—É—á–∞–π–Ω—ã–º–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞–º–∏.\n\n"
            "–í–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É, –±–æ—Ç –Ω–µ —Ö—Ä–∞–Ω–∏—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–ø–∏—Å–∫–∏.\n\n"
            "–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –∫–æ–º–∞–Ω–¥, –≤–≤–µ–¥–∏—Ç–µ /help\n"
            "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–≤–µ–¥–∏—Ç–µ /stats",
            parse_mode="Markdown",
            reply_markup=get_keyboard(user_id)
        )
    
    elif text == "üé≤ –°–ª—É—á–∞–π–Ω–∞—è —Ç–µ–º–∞":
        state = get_user_state(user_id)
        if state == USER_CHATTING:
            companion_id = chat_pairs.get(user_id)
            if companion_id:
                random_topic = random.choice(RANDOM_TOPICS)
                bot.send_message(user_id, f"üé≤ *–°–ª—É—á–∞–π–Ω–∞—è —Ç–µ–º–∞:* {random_topic}", parse_mode="Markdown")
                bot.send_message(companion_id, f"üé≤ *–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø—Ä–µ–¥–ª–æ–∂–∏–ª —Ç–µ–º—É:* {random_topic}", parse_mode="Markdown")
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ª—É—á–∞–π–Ω—É—é —Ç–µ–º—É")
        else:
            bot.send_message(
                user_id,
                "‚ùó –í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —á–∞—Ç–µ.",
                reply_markup=get_keyboard(user_id)
            )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(content_types=['text'])
def handle_text(message):
    global total_messages
    user_id = message.from_user.id
    state = get_user_state(user_id)
    
    if state == USER_CHATTING:
        companion_id = chat_pairs.get(user_id)
        if companion_id:
            bot.send_message(companion_id, message.text)
            total_messages += 1
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —á–∞—Ç–µ –∏ –Ω–µ –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É
        if message.text not in ["üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫", "üëã –ó–∞–∫–æ–Ω—á–∏—Ç—å —á–∞—Ç", "‚ÑπÔ∏è –ò–Ω—Ñ–æ"]:
            bot.send_message(
                user_id,
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /help –¥–ª—è –ø–æ–º–æ—â–∏.",
                reply_markup=get_keyboard(user_id)
            )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–æ—Ç–æ
@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    user_id = message.from_user.id
    state = get_user_state(user_id)
    
    if state == USER_CHATTING:
        companion_id = chat_pairs.get(user_id)
        if companion_id:
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ —Å –Ω–∞–∏–≤—ã—Å—à–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
            photo = message.photo[-1]
            file_id = photo.file_id
            
            # –ü–µ—Ä–µ–¥–∞–µ–º —Ñ–æ—Ç–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É
            caption = message.caption if message.caption else ""
            bot.send_photo(companion_id, photo=file_id, caption=caption)
            global total_messages
            total_messages += 1
    else:
        bot.send_message(
            user_id,
            "–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —á–∞—Ç–µ. –ù–∞–∂–º–∏—Ç–µ 'üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
            reply_markup=get_keyboard(user_id)
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å—Ç–∏–∫–µ—Ä–æ–≤
@bot.message_handler(content_types=['sticker'])
def handle_sticker(message):
    user_id = message.from_user.id
    state = get_user_state(user_id)
    
    if state == USER_CHATTING:
        companion_id = chat_pairs.get(user_id)
        if companion_id:
            file_id = message.sticker.file_id
            bot.send_sticker(companion_id, file_id)
            global total_messages
            total_messages += 1
    else:
        bot.send_message(
            user_id,
            "–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —á–∞—Ç–µ. –ù–∞–∂–º–∏—Ç–µ 'üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
            reply_markup=get_keyboard(user_id)
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(content_types=['voice'])
def handle_voice(message):
    user_id = message.from_user.id
    state = get_user_state(user_id)
    
    if state == USER_CHATTING:
        companion_id = chat_pairs.get(user_id)
        if companion_id:
            file_id = message.voice.file_id
            bot.send_voice(companion_id, file_id)
            global total_messages
            total_messages += 1
    else:
        bot.send_message(
            user_id,
            "–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —á–∞—Ç–µ. –ù–∞–∂–º–∏—Ç–µ 'üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
            reply_markup=get_keyboard(user_id)
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(content_types=['audio', 'document', 'video', 'video_note', 'location', 'contact', 'animation'])
def handle_other(message):
    user_id = message.from_user.id
    state = get_user_state(user_id)
    
    if state != USER_CHATTING:
        bot.send_message(
            user_id,
            "–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —á–∞—Ç–µ. –ù–∞–∂–º–∏—Ç–µ 'üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
            reply_markup=get_keyboard(user_id)
        )
        return
        
    companion_id = chat_pairs.get(user_id)
    if not companion_id:
        return
        
    global total_messages
    total_messages += 1
        
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ
    if message.content_type == 'audio':
        bot.send_audio(companion_id, message.audio.file_id, caption=message.caption)
    elif message.content_type == 'document':
        bot.send_document(companion_id, message.document.file_id, caption=message.caption)
    elif message.content_type == 'video':
        bot.send_video(companion_id, message.video.file_id, caption=message.caption)
    elif message.content_type == 'video_note':
        bot.send_video_note(companion_id, message.video_note.file_id)
    elif message.content_type == 'location':
        bot.send_location(companion_id, message.location.latitude, message.location.longitude)
    elif message.content_type == 'contact':
        bot.send_message(companion_id, "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø—ã—Ç–∞–ª—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç, –Ω–æ —ç—Ç–æ –∑–∞–ø—Ä–µ—â–µ–Ω–æ –≤ —Ü–µ–ª—è—Ö –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏.")
        bot.send_message(user_id, "‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∑–∞–ø—Ä–µ—â–µ–Ω–∞ –≤ —Ü–µ–ª—è—Ö –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏.")
    elif message.content_type == 'animation':
        bot.send_animation(companion_id, message.animation.file_id, caption=message.caption)

if __name__ == "__main__":
    logger.info("–ó–∞–ø—É—Å–∫ –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ —á–∞—Ç-–±–æ—Ç–∞...")
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling
    bot.infinity_polling()
    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
