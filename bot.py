import os
import random
import logging
import telebot
from telebot import types
from collections import deque, defaultdict
import threading
import time
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.environ.get('BOT_TOKEN')
if not BOT_TOKEN:
    logger.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN")
    raise ValueError("BOT_TOKEN –Ω–µ —É–∫–∞–∑–∞–Ω")

# –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
ADMIN_IDS = os.environ.get('ADMIN_IDS', '')
ADMIN_IDS = [int(admin_id.strip()) for admin_id in ADMIN_IDS.split(',') if admin_id.strip().isdigit()]
logger.info(f"–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {ADMIN_IDS}")

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USER_SEARCHING = 1      # –ò—â–µ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
USER_CHATTING = 2       # –û–±—â–∞–µ—Ç—Å—è —Å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º
USER_IDLE = 0           # –ù–µ –≤ –ø–æ–∏—Å–∫–µ –∏ –Ω–µ –≤ —á–∞—Ç–µ
ADMIN_MONITORING = 3    # –ê–¥–º–∏–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç —á–∞—Ç

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
users = {}              # –°–ª–æ–≤–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
search_queue = deque()  # –û—á–µ—Ä–µ–¥—å –ª—é–¥–µ–π –≤ –ø–æ–∏—Å–∫–µ
chat_pairs = {}         # –ü–∞—Ä—ã —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤: user_id -> companion_id
chat_history = defaultdict(list)  # –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π: chat_id -> [messages]
admin_monitoring = {}   # –ö–∞–∫–æ–π –∞–¥–º–∏–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç –∫–∞–∫–æ–π —á–∞—Ç: admin_id -> chat_id
chat_id_map = {}        # –ú—ç–ø–ø–∏–Ω–≥ –ø–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫ unique chat_id: (user1_id, user2_id) -> chat_id

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
total_messages = 0
started_chats = 0
active_chats = 0

# –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –æ–±—â–∏–º –¥–∞–Ω–Ω—ã–º
users_lock = threading.RLock()
history_lock = threading.RLock()

def get_user_state(user_id):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    with users_lock:
        return users.get(user_id, {}).get('state', USER_IDLE)

def set_user_state(user_id, state):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    with users_lock:
        if user_id not in users:
            users[user_id] = {'state': state}
        else:
            users[user_id]['state'] = state

def add_to_search_queue(user_id):
    """–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—á–µ—Ä–µ–¥—å –ø–æ–∏—Å–∫–∞"""
    with users_lock:
        if user_id not in search_queue:
            search_queue.append(user_id)
            set_user_state(user_id, USER_SEARCHING)

def remove_from_search_queue(user_id):
    """–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –ø–æ–∏—Å–∫–∞"""
    with users_lock:
        if user_id in search_queue:
            search_queue.remove(user_id)
        if get_user_state(user_id) == USER_SEARCHING:
            set_user_state(user_id, USER_IDLE)

def generate_chat_id():
    """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —á–∞—Ç–∞"""
    return str(int(time.time())) + str(random.randint(1000, 9999))

def create_chat_pair(user1_id, user2_id):
    """–°–æ–∑–¥–∞—Ç—å –ø–∞—Ä—É –¥–ª—è —á–∞—Ç–∞"""
    global started_chats, active_chats
    with users_lock:
        chat_pairs[user1_id] = user2_id
        chat_pairs[user2_id] = user1_id
        set_user_state(user1_id, USER_CHATTING)
        set_user_state(user2_id, USER_CHATTING)
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —á–∞—Ç–∞
        chat_id = generate_chat_id()
        chat_id_map[(user1_id, user2_id)] = chat_id
        chat_id_map[(user2_id, user1_id)] = chat_id
        
        started_chats += 1
        active_chats += 1
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
        with history_lock:
            chat_history[chat_id] = []
        
        return chat_id

def get_chat_id(user_id):
    """–ü–æ–ª—É—á–∏—Ç—å ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    with users_lock:
        companion_id = chat_pairs.get(user_id)
        if companion_id:
            return chat_id_map.get((user_id, companion_id))
    return None

def add_message_to_history(chat_id, sender_id, message_type, content, file_id=None):
    """–î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞"""
    if not chat_id:
        return
        
    with history_lock:
        chat_history[chat_id].append({
            'timestamp': time.time(),
            'sender_id': sender_id,
            'type': message_type,
            'content': content,
            'file_id': file_id
        })

def end_chat(user_id):
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    global active_chats
    with users_lock:
        if user_id in chat_pairs:
            companion_id = chat_pairs[user_id]
            
            # –ü–æ–ª—É—á–∞–µ–º ID —á–∞—Ç–∞ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
            chat_id = chat_id_map.get((user_id, companion_id))
            
            # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –æ –ø–∞—Ä–µ
            if companion_id in chat_pairs:
                del chat_pairs[companion_id]
            del chat_pairs[user_id]
            
            # –û—Ç–∫–ª—é—á–∞–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
            admins_to_update = []
            for admin_id, monitored_chat in admin_monitoring.items():
                if monitored_chat == chat_id:
                    admins_to_update.append(admin_id)
            
            for admin_id in admins_to_update:
                del admin_monitoring[admin_id]
                set_user_state(admin_id, USER_IDLE)
                bot.send_message(
                    admin_id,
                    "‚ö†Ô∏è –ß–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–ª–∏, –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω.",
                    reply_markup=get_admin_keyboard(admin_id)
                )
            
            # –£–¥–∞–ª—è–µ–º –º–∞–ø–ø–∏–Ω–≥ ID —á–∞—Ç–∞
            if (user_id, companion_id) in chat_id_map:
                del chat_id_map[(user_id, companion_id)]
            if (companion_id, user_id) in chat_id_map:
                del chat_id_map[(companion_id, user_id)]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –Ω–∞ –¥–∏—Å–∫
            with history_lock:
                if chat_id and chat_id in chat_history:
                    save_chat_history(chat_id)
                    del chat_history[chat_id]
            
            set_user_state(user_id, USER_IDLE)
            set_user_state(companion_id, USER_IDLE)
            active_chats -= 1
            return companion_id
    return None

def save_chat_history(chat_id):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –≤ —Ñ–∞–π–ª"""
    try:
        with history_lock:
            if chat_id in chat_history:
                history_dir = "chat_histories"
                os.makedirs(history_dir, exist_ok=True)
                filename = f"{history_dir}/chat_{chat_id}.json"
                
                with open(filename, 'w', encoding='utf-8') as f:
                    json.dump(chat_history[chat_id], f, ensure_ascii=False, indent=2)
                
                logger.info(f"–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ {chat_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {filename}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ {chat_id}: {e}")

def find_chat_match():
    """–ù–∞–π—Ç–∏ –ø–∞—Ä—ã —Å—Ä–µ–¥–∏ –∏—â—É—â–∏—Ö —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤"""
    with users_lock:
        while len(search_queue) >= 2:
            user1_id = search_queue.popleft()
            user2_id = search_queue.popleft()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤—Å—ë –µ—â–µ –∏—â—É—Ç —á–∞—Ç
            if get_user_state(user1_id) != USER_SEARCHING or get_user_state(user2_id) != USER_SEARCHING:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –æ—á–µ—Ä–µ–¥—å —Ç–æ–ª—å–∫–æ —Ç–µ—Ö, –∫—Ç–æ –µ—â–µ –∏—â–µ—Ç
                if get_user_state(user1_id) == USER_SEARCHING:
                    search_queue.append(user1_id)
                if get_user_state(user2_id) == USER_SEARCHING:
                    search_queue.append(user2_id)
                continue
                
            chat_id = create_chat_pair(user1_id, user2_id)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–±–æ–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ –Ω–∞—á–∞–ª–µ —á–∞—Ç–∞
            bot.send_message(user1_id, "üé≠ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è –∞–Ω–æ–Ω–∏–º–Ω–æ.", reply_markup=get_keyboard(user1_id))
            bot.send_message(user2_id, "üé≠ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è –∞–Ω–æ–Ω–∏–º–Ω–æ.", reply_markup=get_keyboard(user2_id))
            
            # –û–ø–æ–≤–µ—â–∞–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ –Ω–æ–≤–æ–º —á–∞—Ç–µ
            notify_admins_about_new_chat(chat_id, user1_id, user2_id)
            
            logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –ø–∞—Ä–∞ —á–∞—Ç–∞: {user1_id} <-> {user2_id}, chat_id: {chat_id}")

def notify_admins_about_new_chat(chat_id, user1_id, user2_id):
    """–û–ø–æ–≤–µ—Å—Ç–∏—Ç—å –∞–¥–º–∏–Ω–æ–≤ –æ –Ω–æ–≤–æ–º —á–∞—Ç–µ"""
    for admin_id in ADMIN_IDS:
        try:
            bot.send_message(
                admin_id,
                f"üÜï –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —á–∞—Ç: {chat_id}\nüë§ –£—á–∞—Å—Ç–Ω–∏–∫–∏: {user1_id}, {user2_id}",
                reply_markup=get_admin_keyboard(admin_id)
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")

# –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø–∞—Ä
def search_pairs_periodically():
    while True:
        try:
            find_chat_match()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–∞—Ä: {e}")
        time.sleep(1)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É

# –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∞—Ä
search_thread = threading.Thread(target=search_pairs_periodically, daemon=True)
search_thread.start()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_keyboard(user_id):
    state = get_user_state(user_id)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    
    if state == USER_IDLE:
        markup.add(types.KeyboardButton("üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"))
        markup.add(types.KeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ"))
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—Å–∫—É—é –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω
        if user_id in ADMIN_IDS:
            markup.add(types.KeyboardButton("üëÅÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"))
    elif state == USER_SEARCHING:
        markup.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫"))
        markup.add(types.KeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ"))
    elif state == USER_CHATTING:
        markup.add(types.KeyboardButton("üëã –ó–∞–∫–æ–Ω—á–∏—Ç—å —á–∞—Ç"))
        markup.add(types.KeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω–∞—è —Ç–µ–º–∞"))
    elif state == ADMIN_MONITORING:
        markup.add(types.KeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"))
    
    return markup

def get_admin_keyboard(admin_id):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    state = get_user_state(admin_id)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    
    if state == USER_IDLE or state == ADMIN_MONITORING:
        markup.add(types.KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))
        markup.add(types.KeyboardButton("üîç –ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã"))
        markup.add(types.KeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–æ–≤"))
        markup.add(types.KeyboardButton("‚¨ÖÔ∏è –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"))
    
    return markup

# –°–ø–∏—Å–æ–∫ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ç–µ–º –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
RANDOM_TOPICS = [
    "–ö–∞–∫–æ–µ –≤–∞—à–µ –ª—é–±–∏–º–æ–µ –º–µ—Å—Ç–æ, –≥–¥–µ –≤—ã –ø–æ–±—ã–≤–∞–ª–∏?",
    "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Ñ–∏–ª—å–º–µ, –∫–æ—Ç–æ—Ä—ã–π –≤–∞—Å –≤–ø–µ—á–∞—Ç–ª–∏–ª.",
    "–ï—Å–ª–∏ –±—ã –≤—ã –º–æ–≥–ª–∏ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ª—é–±–æ–π –Ω–∞–≤—ã–∫ –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ, —á—Ç–æ –±—ã —ç—Ç–æ –±—ã–ª–æ?",
    "–ö–∞–∫—É—é –µ–¥—É –≤—ã –º–æ–≥–ª–∏ –±—ã –µ—Å—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å?",
    "–ß—Ç–æ –±—ã –≤—ã —Å–¥–µ–ª–∞–ª–∏, –µ—Å–ª–∏ –±—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –º–∏–ª–ª–∏–æ–Ω?",
    "–ö–∞–∫–∞—è –≤–∞—à–∞ –ª—é–±–∏–º–∞—è –∫–Ω–∏–≥–∞ –∏ –ø–æ—á–µ–º—É?",
    "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –Ω–µ–æ–±—ã—á–Ω–æ–µ —Ö–æ–±–±–∏?",
    "–ö–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –∏—Å—Ç–æ—Ä–∏–∏ –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?",
    "–ö–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç –≤–∞—à –∏–¥–µ–∞–ª—å–Ω—ã–π –≤—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å?",
    "–ï—Å–ª–∏ –±—ã –≤—ã –º–æ–≥–ª–∏ –∂–∏—Ç—å –≤ –ª—é–±–æ–π —Å—Ç—Ä–∞–Ω–µ, –∫–∞–∫—É—é –±—ã –≤—ã–±—Ä–∞–ª–∏?"
]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start_command(message):
    user_id = message.from_user.id
    keyboard = get_keyboard(user_id)
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    if user_id in ADMIN_IDS:
        bot.send_message(
            user_id, 
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê–Ω–æ–Ω–∏–º–Ω—ã–π –ß–∞—Ç!\n\n"
            "–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.\n"
            "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ 'üëÅÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å'.",
            reply_markup=keyboard
        )
    else:
        bot.send_message(
            user_id, 
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê–Ω–æ–Ω–∏–º–Ω—ã–π –ß–∞—Ç!\n\n"
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è —Å –Ω–µ–∑–Ω–∞–∫–æ–º—Ü–∞–º–∏ –∞–Ω–æ–Ω–∏–º–Ω–æ.\n"
            "–ù–∞–∂–º–∏—Ç–µ 'üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
            reply_markup=keyboard
        )
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@bot.message_handler(commands=['help'])
def help_command(message):
    user_id = message.from_user.id
    
    if user_id in ADMIN_IDS:
        bot.send_message(
            user_id,
            "üìå *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:*\n\n"
            "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ 'üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞' –¥–ª—è –ø–æ–∏—Å–∫–∞\n"
            "‚Ä¢ –î–æ–∂–¥–∏—Ç–µ—Å—å, –ø–æ–∫–∞ –±–æ—Ç –Ω–∞–π–¥–µ—Ç –≤–∞–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞\n"
            "‚Ä¢ –û–±—â–∞–π—Ç–µ—Å—å –∞–Ω–æ–Ω–∏–º–Ω–æ!\n"
            "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ 'üëã –ó–∞–∫–æ–Ω—á–∏—Ç—å —á–∞—Ç', –∫–æ–≥–¥–∞ –∑–∞—Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä\n\n"
            "üìù *–ö–æ–º–∞–Ω–¥—ã:*\n"
            "/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
            "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n\n"
            "‚öôÔ∏è *–ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
            "/admin - –û—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n"
            "/monitor [chat_id] - –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç",
            parse_mode="Markdown",
            reply_markup=get_keyboard(user_id)
        )
    else:
        bot.send_message(
            user_id,
            "üìå *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:*\n\n"
            "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ 'üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞' –¥–ª—è –ø–æ–∏—Å–∫–∞\n"
            "‚Ä¢ –î–æ–∂–¥–∏—Ç–µ—Å—å, –ø–æ–∫–∞ –±–æ—Ç –Ω–∞–π–¥–µ—Ç –≤–∞–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞\n"
            "‚Ä¢ –û–±—â–∞–π—Ç–µ—Å—å –∞–Ω–æ–Ω–∏–º–Ω–æ!\n"
            "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ 'üëã –ó–∞–∫–æ–Ω—á–∏—Ç—å —á–∞—Ç', –∫–æ–≥–¥–∞ –∑–∞—Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä\n\n"
            "üìù *–ö–æ–º–∞–Ω–¥—ã:*\n"
            "/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
            "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞",
            parse_mode="Markdown",
            reply_markup=get_keyboard(user_id)
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats
@bot.message_handler(commands=['stats'])
def stats_command(message):
    user_id = message.from_user.id
    with users_lock:
        waiting_users = len(search_queue)
    
    stats_message = (
        f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:*\n\n"
        f"üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: {active_chats}\n"
        f"üîÑ –í—Å–µ–≥–æ –Ω–∞—á–∞—Ç–æ —á–∞—Ç–æ–≤: {started_chats}\n"
        f"üí¨ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}\n"
        f"‚è≥ –û–∂–∏–¥–∞—é—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞: {waiting_users}\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—Å–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω
    if user_id in ADMIN_IDS:
        with history_lock:
            saved_chats = len(os.listdir("chat_histories")) if os.path.exists("chat_histories") else 0
        
        stats_message += (
            f"\nüëÅÔ∏è *–ê–¥–º–∏–Ω—Å–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
            f"üìÅ –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏–π —á–∞—Ç–æ–≤: {saved_chats}\n"
            f"üëÆ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {len(ADMIN_IDS)}\n"
        )
    
    bot.send_message(
        user_id,
        stats_message,
        parse_mode="Markdown",
        reply_markup=get_keyboard(user_id)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin
@bot.message_handler(commands=['admin'])
def admin_command(message):
    user_id = message.from_user.id
    
    if user_id in ADMIN_IDS:
        bot.send_message(
            user_id,
            "üëÅÔ∏è *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:",
            parse_mode="Markdown",
            reply_markup=get_admin_keyboard(user_id)
        )
        set_user_state(user_id, ADMIN_MONITORING)
    else:
        bot.send_message(
            user_id,
            "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            reply_markup=get_keyboard(user_id)
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /monitor
@bot.message_handler(commands=['monitor'])
def monitor_command(message):
    user_id = message.from_user.id
    
    if user_id not in ADMIN_IDS:
        bot.send_message(user_id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    # –ü–æ–ª—É—á–∏—Ç—å chat_id –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    command_args = message.text.split()
    if len(command_args) < 2:
        bot.send_message(
            user_id,
            "‚ùó –£–∫–∞–∂–∏—Ç–µ ID —á–∞—Ç–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.\n"
            "–ü—Ä–∏–º–µ—Ä: `/monitor 16872938475`",
            parse_mode="Markdown"
        )
        return
    
    chat_id = command_args[1]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–æ–π —á–∞—Ç –≤ –∏—Å—Ç–æ—Ä–∏–∏
    with history_lock:
        if chat_id not in chat_history:
            active_chat_ids = list(chat_history.keys())
            if not active_chat_ids:
                bot.send_message(user_id, "‚ùó –£–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤.")
            else:
                bot.send_message(
                    user_id, 
                    f"‚ùó –£–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ—Å—Ç—É–ø–Ω—ã–µ —á–∞—Ç—ã:\n\n" +
                    "\n".join([f"‚Ä¢ `{chat_id}`" for chat_id in active_chat_ids]),
                    parse_mode="Markdown"
                )
            return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —á–∞—Ç–∞
    admin_monitoring[user_id] = chat_id
    set_user_state(user_id, ADMIN_MONITORING)
    
    bot.send_message(
        user_id,
        f"üëÅÔ∏è –í—ã –Ω–∞—á–∞–ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —á–∞—Ç–∞ {chat_id}.\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —ç—Ç–æ–≥–æ —á–∞—Ç–∞.\n"
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ —É–∑–Ω–∞—é—Ç, —á—Ç–æ –∏—Ö —á–∞—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—Å—è.",
        reply_markup=get_keyboard(user_id)
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
    with history_lock:
        if chat_id in chat_history and chat_history[chat_id]:
            bot.send_message(user_id, "üìú *–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞:*", parse_mode="Markdown")
            
            for msg in chat_history[chat_id]:
                sender = f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {msg['sender_id']}"
                content = msg['content']
                
                if msg['type'] == 'text':
                    bot.send_message(user_id, f"{sender}:\n{content}")
                elif msg['type'] == 'photo' and msg['file_id']:
                    bot.send_photo(user_id, msg['file_id'], caption=f"{sender}:\n{content if content else ''}")
                elif msg['type'] == 'sticker' and msg['file_id']:
                    bot.send_sticker(user_id, msg['file_id'])
                    bot.send_message(user_id, f"{sender} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å—Ç–∏–∫–µ—Ä")
                elif msg['type'] == 'voice' and msg['file_id']:
                    bot.send_voice(user_id, msg['file_id'], caption=f"{sender}")
                # –î—Ä—É–≥–∏–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
@bot.message_handler(func=lambda message: message.text in [
    "üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫", "üëã –ó–∞–∫–æ–Ω—á–∏—Ç—å —á–∞—Ç", "‚ÑπÔ∏è –ò–Ω—Ñ–æ", "üé≤ –°–ª—É—á–∞–π–Ω–∞—è —Ç–µ–º–∞",
    "üëÅÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", "‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", "‚¨ÖÔ∏è –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏",
    "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üîç –ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã", "üìú –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–æ–≤"
])
def button_handler(message):
    user_id = message.from_user.id
    text = message.text
    
    # –ö–Ω–æ–ø–∫–∏ –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if text == "üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞":
        state = get_user_state(user_id)
        if state == USER_IDLE:
            add_to_search_queue(user_id)
            bot.send_message(
                user_id, 
                "üîç –ò—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.",
                reply_markup=get_keyboard(user_id)
            )
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞")
        else:
            bot.send_message(
                user_id,
                "‚ùó –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫, –ø–æ–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —á–∞—Ç–µ –∏–ª–∏ —É–∂–µ –∏—â–µ—Ç–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.",
                reply_markup=get_keyboard(user_id)
            )
    
    elif text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫":
        state = get_user_state(user_id)
        if state == USER_SEARCHING:
            remove_from_search_queue(user_id)
            bot.send_message(
                user_id,
                "üõë –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.",
                reply_markup=get_keyboard(user_id)
            )
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ–Ω–∏–ª –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞")
        else:
            bot.send_message(
                user_id,
                "‚ùó –í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–µ–∂–∏–º–µ –ø–æ–∏—Å–∫–∞.",
                reply_markup=get_keyboard(user_id)
            )
    
    elif text == "üëã –ó–∞–∫–æ–Ω—á–∏—Ç—å —á–∞—Ç":
        state = get_user_state(user_id)
        if state == USER_CHATTING:
            companion_id = end_chat(user_id)
            if companion_id:
                bot.send_message(
                    companion_id,
                    "üëã –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª —á–∞—Ç.\n–ù–∞–∂–º–∏—Ç–µ 'üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä.",
                    reply_markup=get_keyboard(companion_id)
                )
            bot.send_message(
                user_id,
                "üëã –ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω.\n–ù–∞–∂–º–∏—Ç–µ 'üîç –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä.",
                reply_markup=get_keyboard(user_id)
            )
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–≤–µ—Ä—à–∏–ª —á–∞—Ç —Å {companion_id}")
        else:
            bot.send_message(
                user_id,
                "‚ùó –í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —á–∞—Ç–µ.",
                reply_markup=get_keyboard(user_id)
            )
    
    elif text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ":
        bot.send_message(
            user_id,
            "ü§ñ *–û –±–æ—Ç–µ:*\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –∞–Ω–æ–Ω–∏–º–Ω–æ –æ–±—â–∞—Ç—å—Å—è —Å —Å–ª—É—á–∞–π–Ω—ã–º–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞–º–∏.\n\n"
            "–í–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É, –±–æ—Ç –Ω–µ —Ö—Ä–∞–Ω–∏—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–ø–∏—Å–∫–∏.\n\n"
            "–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –∫–æ–º–∞–Ω–¥, –≤–≤–µ–¥–∏—Ç–µ /help\n"
            "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–≤–µ–¥–∏—Ç–µ /stats",
            parse_mode="Markdown",
            reply_markup=get_keyboard(user_id)
        )
    
    elif text == "üé≤ –°–ª—É—á–∞–π–Ω–∞—è —Ç–µ–º–∞":
        state = get_user_state(user_id)
        if state == USER_CHATTING:
            companion_id = chat_pairs.get(user_id)
            if companion_id:
                random_topic = random.choice(RANDOM_TOPICS)
                bot.send_message(user_id, f"üé≤ *–°–ª—É—á–∞–π–Ω–∞—è —Ç–µ–º–∞:* {random_topic}", parse_mode="Markdown")
                bot.send_message(companion_id, f"üé≤ *–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø—Ä–µ–¥–ª–æ–∂–∏–ª —Ç–µ–º—É:* {random_topic}", parse_mode="Markdown")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
                chat_id = get_chat_id(user_id)
                if chat_id:
                    add_message_to_history(chat_id, user_id, "system", f"–ü—Ä–µ–¥–ª–æ–∂–∏–ª —Ç–µ–º—É: {random_topic}")
                
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ª—É—á–∞–π–Ω—É—é —Ç–µ–º—É")
        else:
            bot.send_message(
                user_id,
                "‚ùó –í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —á–∞—Ç–µ.",
                reply_markup=get_keyboard(user_id)
            )
    
    # –ö–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    elif text == "üëÅÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å" and user_id in ADMIN_IDS:
        set_user_state(user_id, ADMIN_MONITORING)
        bot.send_message(
            user_id,
            "üëÅÔ∏è *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:",
            parse_mode="Markdown",
            reply_markup=get_admin_keyboard(user_id)
        )
    
    elif text == "‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å" and user_id in ADMIN_IDS:
        # –ï—Å–ª–∏ –∞–¥–º–∏–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–ª —á–∞—Ç, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        if user_id in admin_monitoring:
            del admin_monitoring[user_id]
        
        set_user_state(user_id, ADMIN_MONITORING)
        bot.send_message(
            user_id,
            "üëÅÔ∏è *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:",
            parse_mode="Markdown",
            reply_markup=get_admin_keyboard(user_id)
        )
    
    elif text == "‚¨ÖÔ∏è –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏" and user_id in ADMIN_IDS:
        # –ï—Å–ª–∏ –∞–¥–º–∏–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–ª —á–∞—Ç, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        if user_id in admin_monitoring:
            del admin_monitoring[user_id]
        
        set_user_state(user_id, USER_IDLE)
        bot.send_message(
            user_id,
            "‚úÖ –í—ã –≤—ã—à–ª–∏ –∏–∑ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            reply_markup=get_keyboard(user_id)
        )
    
    elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" and user_id in ADMIN_IDS:
        with users_lock:
            waiting_users = len(search_queue)
            total_users = len(users)
        
        with history_lock:
            saved_chats = len(os.listdir("chat_histories")) if os.path.exists("chat_histories") else 0
            active_chat_ids = list(chat_history.keys())
        
        stats_message = (
            f"üìä *–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:*\n\n"
            f"üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: {active_chats}\n"
            f"üîÑ –í—Å–µ–≥–æ –Ω–∞—á–∞—Ç–æ —á–∞—Ç–æ–≤: {started_chats}\n"
            f"üí¨ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}\n"
            f"‚è≥ –û–∂–∏–¥–∞—é—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞: {waiting_users}\n"
            f"üë§ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"üìÅ –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏–π —á–∞—Ç–æ–≤: {saved_chats}\n"
            f"üëÆ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {len(ADMIN_IDS)}\n\n"
            f"üîç *IDs –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤:*\n"
        )
        
        if active_chat_ids:
            for chat_id in active_chat_ids:
                stats_message += f"‚Ä¢ `{chat_id}`\n"
        else:
            stats_message += "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤\n"
        
        bot.send_message(
            user_id,
            stats_message,
            parse_mode="Markdown",
            reply_markup=get_admin_keyboard(user_id)
        )
    
    elif text == "üîç –ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã" and user_id in ADMIN_IDS:
        with history_lock:
            active_chat_ids = list(chat_history.keys())
        
        if not active_chat_ids:
            bot.send_message(
                user_id,
                "‚ùå –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤.",
                reply_markup=get_admin_keyboard(user_id)
            )
            return
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
        chat_users = {}
        with users_lock:
            for user1_id, user2_id in chat_id_map:
                chat_id = chat_id_map.get((user1_id, user2_id))
                if chat_id and chat_id in active_chat_ids:
                    chat_users[chat_id] = (user1_id, user2_id)
        
        message = "üëÅÔ∏è *–ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã:*\n\n"
        
        for chat_id in active_chat_ids:
            if chat_id in chat_users:
                user1_id, user2_id = chat_users[chat_id]
                message += f"üÜî –ß–∞—Ç: `{chat_id}`\n"
                message += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {user1_id}, {user2_id}\n"
                message += f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {len(chat_history[chat_id])}\n"
                message += f"üïí –ù–∞—á–∞—Ç: {time.strftime('%d.%m.%Y %H:%M', time.localtime(chat_history[chat_id][0]['timestamp'] if chat_history[chat_id] else time.time()))}\n"
                message += f"üì± –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å: /monitor {chat_id}\n\n"
        
        bot.send_message(
            user_id,
            message,
            parse_mode="Markdown",
            reply_markup=get_admin_keyboard(user_id)
        )
    
    elif text == "üìú –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–æ–≤" and user_id in ADMIN_IDS:
        history_dir = "chat_histories"
        if not os.path.exists(history_dir) or not os.listdir(history_dir):
            bot.send_message(
                user_id,
                "‚ùå –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–æ–≤ –ø—É—Å—Ç–∞.",
                reply_markup=get_admin_keyboard(user_id)
            )
            return
        
        history_files = os.listdir(history_dir)
        history_files.sort(key=lambda f: os.path.getmtime(os.path.join(history_dir, f)), reverse=True)
        
        message = "üìú *–ò—Å—Ç–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤:*\n\n"
        
        for i, file_name in enumerate(history_files[:10]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ 10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —á–∞—Ç–æ–≤
            chat_id = file_name.replace("chat_", "").replace(".json", "")
            file_path = os.path.join(history_dir, file_name)
            file_time = time.strftime('%d.%m.%Y %H:%M', time.localtime(os.path.getmtime(file_path)))
            
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    chat_data = json.load(f)
                    message_count = len(chat_data)
                    
                    message += f"üÜî –ß–∞—Ç: `{chat_id}`\n"
                    message += f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {message_count}\n"
                    message += f"üïí –ó–∞–≤–µ—Ä—à–µ–Ω: {file_time}\n"
                    message += f"üì± –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å: /view_history {chat_id}\n\n"
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ {file_name}: {e}")
        
        if len(history_files) > 10:
            message += f"...–∏ –µ—â–µ {len(history_files) - 10} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤."
        
        bot.send_message(
            user_id,
            message,
            parse_mode="Markdown",
            reply_markup=get_admin_keyboard(user_id)
        )
